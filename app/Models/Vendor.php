<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Vendor extends Model
{
    use HasFactory;
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    // Relationships
    public function products()
    {
        return $this->hasMany(Product::class);
    }

    public function users()
    {
        return $this->hasMany(User::class);
    }

    public function vendorProducts()
    {
        return $this->hasMany(VendorProduct::class);
    }



    // Custom Methods

    /**
     * Get the total revenue generated by the vendor.
     *
     * @return float
     */
    public function getTotalRevenueAttribute()
    {
        return $this->products->sum('total_sales');
    }

    /**
     * Get the top-selling product of the vendor.
     *
     * @return Product|null
     */
    public function getTopSellingProductAttribute()
    {
        return $this->products()->orderBy('total_sales', 'desc')->first();
    }

    // Add more methods or relationships based on your specific needs

    /**
     * Scope a query to only include vendors with active products.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeWithActiveProducts($query)
    {
        return $query->whereHas('products', function ($query) {
            $query->where('status', 'active');
        });
    }

    /**
     * Get the total number of active products for the vendor.
     *
     * @return int
     */
    public function getTotalActiveProductsAttribute()
    {
        return $this->products()->where('status', 'active')->count();
    }

    /**
     * Get the average rating of the vendor based on product reviews.
     *
     * @return float|null
     */
    public function getAverageRatingAttribute()
    {
        return $this->products->avg('reviews.rating');
    }


}
